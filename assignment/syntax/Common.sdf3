module Common

lexical sorts
  ID INT STRING TYPE_NAME
  STRING_CHAR BACKSLASH_CHAR
  COMMENT_CHAR INSIDE_COMMENT
  NEWLINE_EOF EOF Entity_Name

lexical syntax

  ID               = [a-zA-Z] [a-zA-Z0-9]*
  
  Entity_Name      = [a-zA-Z] [a-zA-Z]*
  TYPE_NAME        = [a-zA-Z] [a-zA-Z]*
  INT              = "-"? [0-9]+
  STRING           = "\"" STRING_CHAR* "\""
  STRING_CHAR      = ~[\\\"\n]
  STRING_CHAR      = "\\" [\\\"]
  LAYOUT           = [\ \t\n\r]
  COMMENT_CHAR     = [\*]
  LAYOUT           = "/*" INSIDE_COMMENT* "*/"
  INSIDE_COMMENT   = ~[\*]
  INSIDE_COMMENT   = COMMENT_CHAR
  LAYOUT           = "//" ~[\n\r]* NEWLINE_EOF
  NEWLINE_EOF      = [\n\r]
  NEWLINE_EOF      = EOF
  EOF              =
  
  
    sorts Keyword
    lexical syntax
	Keyword = "int"
	Keyword = "string"
	Keyword = "boolean"
	Keyword = "true"
	Keyword = "false"
	Keyword = "null"

lexical restrictions

  // Ensure greedy matching for lexicals
  
  COMMENT_CHAR    -/- [\/]
  INT             -/- [0-9]
  ID              -/- [a-zA-Z0-9\_]
  
  // EOF may not be followed by any char
  
  EOF             -/- ~[]

context-free restrictions

  // Ensure greedy matching for comments
  
  LAYOUT? -/- [\ \t\n\r]
  LAYOUT? -/- [\/].[\/]
  LAYOUT? -/- [\/].[\*]
