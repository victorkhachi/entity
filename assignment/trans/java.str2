module java

imports strategolib
imports signatures/-


strategies
	to-code = topdown(try(program-to-java))
	


rules
	program-to-java:
		Statement(e) -> <map(entity-to-java); concat-strings>e
//    	with ents := <map(entity-to-java)>e


	entity-to-java:
		Decl(en, la) -> $[
			public class [eName] {
				[atts]
			}
		]
		with
			eName := en 
			; atts := <map(exp-to-java <+ enti-att-to-java); concat-strings>la
			
			
//	exp-to-java::? -> ?	
	exp-to-java:
		Exp(e1, e2, e3) -> $[
			 private [java-type] [name] [val];
		]
		with 
			java-type := <to-java-type>e2
			; name := e1
			; val := <res-exp <+ none>e3
			
			
	enti-att-to-java:
	    Ent(e1,e2)-> $[
	    private [eName] [entity]()
	    ]
	    with
	    	 eName := e1
	  		 ;entity := e2
	 
//	to-java-type::Type -> ? 
	to-java-type:
		Int() -> $[int] 
	
	to-java-type:
	    Str() -> $[string]
	
	res-exp	:
	  Some(Attexp(e)) -> [expression]
	  with 
	  expression := <compute-exp >e	
	  
	compute-exp:
	   Add(e1,e2) -> $[ [p1] + [p2]]
	   with
	      p1 := <compute-exp>e1
	     ;p2 := <compute-exp>e2
	
	none:
	  None() -> $[]
	  
	compute-exp:
	   Sub(e1,e2) -> Sub(p1,p2)
	   with
	      p1 := e1
	     ;p2 :=e2
	
	compute-exp:
	   String(e1) -> e1
	 
	compute-exp:
	   Num(e1) -> e1
	  
	compute-exp:
	   Id(e1) -> e1
	  
	     
    
      
   
   
    
	      
	